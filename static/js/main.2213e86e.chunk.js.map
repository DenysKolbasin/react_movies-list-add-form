{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validateUrl","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","urlError","htmlFor","type","classNames","event","target","onBlur","baseFormData","NewMovie","onAdd","newMovie","setNewMovie","count","setCount","isAnyFieldEmpty","handleMovieFieldChange","prevMovie","isValidUrl","url","RegExp","test","isUrlValid","undefined","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2213e86e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validateUrl?: (value: string) => string | undefined,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  validateUrl = () => undefined,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && (required && !value.trim());\n  const urlError = validateUrl(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || urlError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {urlError && (\n        <p className=\"help is-danger\">{urlError}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\nconst baseFormData = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\ninterface Props {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [newMovie, setNewMovie] = useState(baseFormData);\n  const {\n    title, description, imgUrl, imdbUrl, imdbId,\n  } = newMovie;\n\n  const [count, setCount] = useState(0);\n\n  const isAnyFieldEmpty\n    = !title.trim()\n    || !imgUrl.trim()\n    || !imdbUrl.trim()\n    || !imdbId.trim();\n\n  const handleMovieFieldChange = (name: string, value: string) => {\n    setNewMovie((prevMovie) => ({ ...prevMovie, [name]: value }));\n  };\n\n  function isValidUrl(url: string) {\n    if (!url) {\n      return undefined;\n    }\n\n    const pattern = new RegExp(\n      '^('\n        + '((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)'\n        + '(?:[-;:&=+$,\\\\w]+@)?'\n        + '[A-Za-z0-9.-]+|'\n        + '(?:www\\\\.|[-;:&=+$,\\\\w]+@)[A-Za-z0-9.-]+)'\n        + '((?:\\\\/[+~%\\\\/.\\\\w-_]*)?'\n        + '\\\\??(?:[-+=&;%@,.\\\\w_]*)'\n        + '#?(?:[,.!/\\\\\\\\\\\\w]*))?'\n      + ')$',\n    );\n\n    if (!pattern.test(url)) {\n      return 'Error URL';\n    }\n\n    return undefined;\n  }\n\n  const isUrlValid = isValidUrl(imgUrl) === undefined\n    && isValidUrl(imdbUrl) === undefined;\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isAnyFieldEmpty) {\n      return;\n    }\n\n    onAdd(newMovie);\n    setCount(count + 1);\n    setNewMovie(baseFormData);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">\n        Add a movie\n      </h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={value => handleMovieFieldChange('title', value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={value => handleMovieFieldChange('description', value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={value => handleMovieFieldChange('imgUrl', value)}\n        validateUrl={url => isValidUrl(url)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={value => handleMovieFieldChange('imdbUrl', value)}\n        validateUrl={url => isValidUrl(url)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={value => handleMovieFieldChange('imdbId', value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isAnyFieldEmpty || !isUrlValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}